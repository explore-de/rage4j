pipeline {
    agent { label 'docker' }
    options {
      buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
      gitLabConnection('gitlab')
    }
    environment {
        TAG = "${getTag(this)}"
        IMAGE_REPO = 'harbor.explore.de/exentra/explore'
        MAVEN_IMAGE = 'harbor.explore.de/base/maven:3.9.7-eclipse-temurin-21'
    }

    stages {
        stage('checkout') {
            steps {
                checkout scm
                updateGitlabCommitStatus name: 'build', state: 'running'
            }
        }

        stage('mvn package') {
            agent {
                docker {
                    image "${MAVEN_IMAGE}"
                    reuseNode true
                }
            }

            steps {
                withCredentials([
                   string(credentialsId: 'open-ai-token', variable: 'OPEN_API_KEY'),
               ]) {
                    sh 'mvn -B -U -fae clean package'
                }
            }
        }

        stage('mvn publish sbom') {
            agent {
                docker {
                    image "${MAVEN_IMAGE}"
                    reuseNode true
                }
            }
            when {
                anyOf {
                    branch 'main'
                    tag '*'
                }
            }

            steps {
                script {
                    publishMavenSBOM('target/bom.xml')
                }
            }
        }

        stage('SonarQube Analysis') {
            agent {
                docker {
                    image "${MAVEN_IMAGE}"
                    reuseNode true
                }
            }
            when {
                anyOf {
                    branch 'main'
                    tag '*'
                }
            }
            steps {
                withSonarQubeEnv('sonarqube') {
                    sh "mvn -B -fae clean verify sonar:sonar -Dsonar.projectKey=exp_rage-assert_AZNt4ydxya9op9uZ2GTC -Dsonar.projectName='rage-assert'' -Pcoverage"
                }
            }
        }
    }

    post {
        always {
            catchError() {
                junit '**/target/surefire-reports/*.xml'
            }
            cleanWs()
            script {
                syncGitlabPipeline(currentBuild)
                notifyWithSlack(this, 'CHANNEL', currentBuild)
            }
        }
    }
}